name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # 수동 실행 허용

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions에서 사용할 최신 Ubuntu 환경

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3  # 소스 코드를 GitHub Actions에 체크아웃

    - name: Set up Temurin JDK 17
      uses: actions/setup-java@v3  # Temurin OpenJDK 설정
      with:
        distribution: 'temurin'  # Temurin OpenJDK 사용
        java-version: '17'  # Java 17 버전 사용

    - name: Set JAVA_HOME for Gradle
      run: echo "JAVA_HOME=${{ steps.setup-java.outputs.path }}" >> $GITHUB_ENV  # Gradle이 Java 17을 사용하도록 JAVA_HOME 설정

    - name: Give execute permission to gradlew
      run: chmod +x ./gradlew  # gradlew 파일에 실행 권한 부여

    - name: Create application.yml from GitHub Secrets
      run: |
        echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml  # GitHub Secrets에서 application.yml 생성

    - name: Build with Gradle (skip tests)
      run: ./gradlew clean build -x test  # 테스트를 제외하고 빌드 실행

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2  # Docker Buildx 설정

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2  # ECR 로그인 (GitHub Secrets를 통해 AWS 자격증명 사용)

    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        IMAGE_TAG: ${{ github.sha }}  # 커밋 SHA 값을 Docker 이미지 태그로 사용
      run: |
        $(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URL }})
        docker build -t ${{ secrets.ECR_URL }}:${{ github.sha }} .  # Docker 이미지를 빌드
        docker push ${{ secrets.ECR_URL }}:${{ github.sha }}  # Docker 이미지를 ECR에 푸시

    - name: Deploy to Elastic Beanstalk
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
        EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
        IMAGE_TAG: ${{ github.sha }}  # 동일한 커밋 SHA 값을 사용하여 배포
      run: |
        aws elasticbeanstalk update-environment --application-name $EB_APP_NAME --environment-name $EB_ENV_NAME --version-label $IMAGE_TAG --region $AWS_REGION
